{"version":3,"sources":["components/chatbox/ContactItem.jsx","components/chatbox/ContactList.jsx","components/chatbox/ChatHistory.jsx","components/chatbox/UserChatBox.jsx","components/chatbox/ChatBox.jsx","services/chat.jsx"],"names":["ContactItem","className","onClick","this","props","openChat","src","contact","profile_picture","alt","full_name","live","email","primary_phone_number","React","PureComponent","ContactList","state","keyword","is_open","searchUserByKey","bind","openBox","e","setState","target","value","contacts","map","index","status","toLowerCase","includes","key","delete","contact_id","id","archive","active","block","unblock","Chathistory","console","log","isLogedIn","authService","isSigned","chatUser","chat_history","message","sender_id","Number","getCookie","type","properties","style","fontWeight","svg","size","text","download","href","url","icon","faFile","final_read_chat","faUser","is_typing","canPublish","pusher","Pusher","cluster","encrypted","disableStats","UserChatBox","file","uploading_progress","uploading","kbactive","chatKeyPress","chatKeyChange","fileChange","handlePaste","uploadFileFromClipboard","handleSendMessage","handleTogglekbactive","chatService","getMessages","user_id","my_id","then","res","chatDiv","document","getElementById","contactUser","chatListDiv","clientHeight","scrollTop","alertService","showError","clearTimerId","channel","subscribe","data","forEach","history","message_id","typing_user","self","clearTimeout","setTimeout","push","isActive","req","readChatMessage","prevProps","prevState","length","chatBodyScrollTop","unsubscribe","i","clipboardData","items","item","indexOf","getAsFile","preventDefault","sender_profile_picture","my_profile_pic","sendChatMessage","formData","FormData","append","axios","post","onUploadProgress","progressEvent","loaded","total","catch","uploadFile","files","sendTypingStatus","onTyping","closeChatBox","faChevronLeft","completed","onPaste","placeholder","onKeyPress","onChange","htmlFor","faLink","faPaperPlane","Chatbox","chatbox","active_chatbox","show_chatbox","open_chat_box","handleBoxOpen","archiveContact","activeContact","blockContact","unblockContact","deleteContact","activeChatBox","notifySoundUrl","notifySound","Audio","getContactLists","active_contact","showSuccess","sender","playPromise","play","chatmoduleReducer","is_show","display","contactId","foreach","userId","updateContactStatus","role","aria-label","faCommentAlt","faTimes","Component","ajaxGet","API_HOST"],"mappings":"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","file":"static/js/36.51092a6c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass ContactItem extends React.PureComponent {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n  render() {\r\n    return (\r\n      <li className=\"main-con-list\" onClick={this.props.openChat}>\r\n        <div className=\"con-list-left\">\r\n          <div className=\"list-img\">\r\n            <img src={this.props.contact.profile_picture.src} alt=\"Hi\"/>\r\n          </div>\r\n        </div>\r\n        <div className=\"con-list-right\">\r\n          <div className=\"con-list-meta\">\r\n            <div className=\"con-list-body-author\">\r\n              {\" \"}\r\n              <strong> {this.props.contact.full_name}</strong>\r\n            </div>\r\n            <div className=\"con-list-body-timestamp\">\r\n              {this.props.contact.live}\r\n            </div>\r\n          </div>\r\n          <div className=\"con-list-content\">\r\n            <div className=\"con-list-in\">\r\n              <span className=\"con-list-in-l\">Email:</span>\r\n              <div className=\"con-listi-in-r\"> {this.props.contact.email}</div>\r\n            </div>\r\n            <div className=\"con-list-in\">\r\n              <span className=\"con-list-in-l\">Phone:</span>\r\n              <div className=\"con-listi-in-r\">\r\n                {\" \"}\r\n                {this.props.contact.primary_phone_number}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n    // return (\r\n    //   <li className=\"list-group-item cs-list-users offline\">\r\n    //     <Link to=\"#\" className=\"float-left\" onClick={this.props.openChat}>\r\n    //       <span className=\"image\">\r\n    //         <img src={this.props.contact.profile_picture.src} width=\"32px\" alt=\"contact profile\"/>\r\n    //       </span>\r\n    //       <span className=\"xwb-display-name\">\r\n    //         {this.props.contact.full_name}\r\n    //       </span>\r\n\r\n    //       {/* <p className='text-truncate'> {this.props.contact.email}</p>  */}\r\n    //     </Link>\r\n    //     <div className=\"dropdown float-right\">\r\n    //       <Link to=\"#\" className=\"dropdown-toggle\" data-toggle=\"dropdown\">\r\n    //         <i className=\"fa fa-ellipsis-h\"></i>\r\n    //       </Link>\r\n    //       <div className=\"dropdown-menu\">\r\n    //         <Link\r\n    //           to=\"#\"\r\n    //           className=\"dropdown-item\"\r\n    //           onClick={\r\n    //             this.props.contact.status === \"active\"\r\n    //               ? this.props.archive\r\n    //               : this.props.active\r\n    //           }\r\n    //         >\r\n    //           {this.props.contact.status === \"active\" ? \"Archive\" : \"Active\"}\r\n    //         </Link>\r\n    //         {this.props.contact.status !== \"blocked\" ? (\r\n    //           <Link className=\"dropdown-item\" to=\"#\" onClick={this.props.block}>\r\n    //             Block\r\n    //           </Link>\r\n    //         ) : null}\r\n    //         {this.props.contact.status === \"blocked\" ? (\r\n    //           <Link\r\n    //             className=\"dropdown-item\"\r\n    //             to=\"#\"\r\n    //             onClick={this.props.unblock}\r\n    //           >\r\n    //             UnBlock\r\n    //           </Link>\r\n    //         ) : null}\r\n    //         <Link className=\"dropdown-item\" to=\"#\" onClick={this.props.delete}>\r\n    //           Delete\r\n    //         </Link>\r\n    //         {/* <a className=\"dropdown-item\" onClick={this.props}>Link 3</a> */}\r\n    //       </div>\r\n    //     </div>\r\n    //   </li>\r\n    // );\r\n  }\r\n}\r\nexport default ContactItem;\r\n","import React from \"react\";\r\nimport ContactItem from \"./ContactItem\";\r\n\r\nclass ContactList extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: \"\",\r\n      is_open: true\r\n    };\r\n    this.searchUserByKey = this.searchUserByKey.bind(this);\r\n    this.openBox = this.openBox.bind(this);\r\n  }\r\n  searchUserByKey(e) {\r\n    this.setState({\r\n      keyword: e.target.value\r\n    });\r\n  }\r\n  openBox() {\r\n    this.setState({\r\n      is_open: !this.state.is_open\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <ul className=\"body-main-con-mid\">\r\n        {this.props.contacts.map((contact, index) => {\r\n          if (\r\n            contact.status === \"active\" &&\r\n            (contact.full_name\r\n              .toLowerCase()\r\n              .includes(this.state.keyword.toLowerCase()) ||\r\n              contact.email\r\n                .toLowerCase()\r\n                .includes(this.state.keyword.toLowerCase()))\r\n          ) {\r\n            return (\r\n              <ContactItem\r\n                keyword={this.setState.keyword}\r\n                key={index}\r\n                contact={contact}\r\n                delete={() => this.props.delete(contact.contact_id)}\r\n                openChat={() => this.props.openChat(contact.id)}\r\n                archive={() => this.props.archive(contact.contact_id)}\r\n                active={() => this.props.active(contact.contact_id)}\r\n                block={() => this.props.block(contact.contact_id)}\r\n                unblock={() => this.props.unblock(contact.contact_id)}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default ContactList;\r\n","import React from \"react\";\r\n// import dateFns from \"date-fns\";\r\nimport Linkify from \"react-linkify\";\r\nimport { EmojioneV4 } from \"react-emoji-render\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFile, faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { authService } from 'services/auth';\r\nimport { getCookie } from 'services/config';\r\n\r\nclass Chathistory extends React.PureComponent {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  componentDidMount() {}\r\n  onError(e) {\r\n    console.log(e, \"Error!!!\");\r\n  }\r\n  \r\n  render() {\r\n    const isLogedIn = authService.isSigned();\r\n    return (\r\n      <ul id={\"chat-messages-lists_\" + this.props.chatUser}>\r\n        {isLogedIn ? (\r\n          this.props.chat_history.map((message, index) => {\r\n            return (\r\n              <li key={index}>\r\n                <div\r\n                  className={\r\n                    message.sender_id === Number(Number(getCookie('user_id')))\r\n                      ? \"user-comment-middle\"\r\n                      : \"admin-comment-area  user-comment-middle\"\r\n                  }\r\n                >\r\n                  <div className=\"user-comment-middle-inner\">\r\n                    <p>\r\n                      {message.type === \"text\" ? (\r\n                        <Linkify\r\n                          properties={{\r\n                            target: \"_blank\",\r\n                            style: { fontWeight: \"bold\" }\r\n                          }}\r\n                        >\r\n                          <EmojioneV4\r\n                            svg=\"true\"\r\n                            size={128}\r\n                            text={message.message}\r\n                          ></EmojioneV4>\r\n                        </Linkify>\r\n                      ) : (\r\n                        <a download href={message.url}>\r\n                          {message.type === \"file\" ? (\r\n                            <div>\r\n                              <FontAwesomeIcon icon={faFile}/>\r\n                              <span>{message.message}</span>\r\n                            </div>\r\n                          ) : (\r\n                            <img className=\"chat_preview_image\" src={message.url} alt=\"chat preview\"/>\r\n                          )}\r\n                        </a>\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                  {message.final_read_chat ? (\r\n                    <div>\r\n                      <FontAwesomeIcon icon={faUser} className=\"final_read_message\"/>\r\n                      {this.props.is_typing ? (\r\n                        <div className=\"typing-indicator\">\r\n                          <span></span>\r\n                          <span></span>\r\n                          <span></span>\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </li>\r\n            );\r\n          })\r\n        ) : (\r\n          <label>Please Login to chat with Homeowner</label>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default Chathistory;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\nimport Progress from 'react-progressbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faLink, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Chathistory from './ChatHistory';\r\nimport { chatService } from 'services/chat';\r\nimport { alertService } from 'services/alert';\r\n\r\nlet canPublish = true;\r\nconst throttleTime = 200; //0.2 seconds\r\nconst pusher = new Pusher('ccd81a8b36efcabe5a7b', {\r\n  cluster: \"mt1\",\r\n  encrypted: true,\r\n  disableStats: true\r\n});\r\nclass UserChatBox extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      is_open: true,\r\n      message: \"\",\r\n      chat_history: [],\r\n      file: null,\r\n      uploading_progress: 0,\r\n      uploading: false,\r\n      is_typing: false,\r\n      kbactive: false\r\n    };\r\n    this.chatKeyPress = this.chatKeyPress.bind(this);\r\n    this.chatKeyChange = this.chatKeyChange.bind(this);\r\n    this.openBox = this.openBox.bind(this);\r\n    this.fileChange = this.fileChange.bind(this);\r\n    this.handlePaste = this.handlePaste.bind(this);\r\n    this.uploadFileFromClipboard = this.uploadFileFromClipboard.bind(this);\r\n    this.handleSendMessage = this.handleSendMessage.bind(this);\r\n    this.handleTogglekbactive = this.handleTogglekbactive.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    chatService.getMessages(this.props.user_id, this.props.my_id).then(res => {\r\n      if (res) {\r\n        this.setState({ chat_history: res });\r\n        const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n        const chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n          if (chatListDiv && chatListDiv.clientHeight) {\r\n            chatDiv.scrollTop = chatListDiv.clientHeight;\r\n          }\r\n      } else {\r\n        alertService.showError('Get messages');\r\n      }\r\n    });\r\n    const channel = pusher.subscribe(\"chat_\" + this.props.my_id);\r\n    const clearInterval = 900; //0.9 seconds\r\n    let clearTimerId;\r\n    channel.bind(\"message_read\", data => {\r\n      let chat_history = this.state.chat_history;\r\n      chat_history.forEach((history, index) => {\r\n        if (history.id === data.message_id) {\r\n          chat_history[index].final_read_chat = 1;\r\n        } else {\r\n          chat_history[index].final_read_chat = 0;\r\n        }\r\n      });\r\n    });\r\n    channel.bind(\"is_typing\", data => {\r\n      if (data.typing_user === this.props.contactUser.id) {\r\n        this.setState({\r\n          is_typing: true\r\n        });\r\n        let self = this;\r\n        clearTimeout(clearTimerId);\r\n        clearTimerId = setTimeout(function() {\r\n          //clear user is typing message\r\n          self.setState({\r\n            is_typing: false\r\n          });\r\n        }, clearInterval);\r\n      }\r\n    });\r\n    channel.bind(\"App\\\\Events\\\\MessageSent\", data => {\r\n      let chat_history = this.state.chat_history;\r\n      if (data.message.message.sender_id === this.props.contactUser.id) {\r\n        chat_history.push(data.message.message);\r\n        if (this.props.isActive && this.state.is_open) {\r\n          const req = {message_id: data.message.message};\r\n          chatService.readChatMessage(req).then(res => {\r\n            if (res) {\r\n            } else {\r\n              alertService.showError('Read chat message');\r\n            }\r\n          })\r\n        }\r\n      }\r\n      this.setState(\r\n        {\r\n          chat_history: chat_history\r\n        },\r\n        () => {\r\n          let chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n          let chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n          if (chatListDiv && chatListDiv.clientHeight) {\r\n            chatDiv.scrollTop = chatListDiv.clientHeight;\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.chat_history.length === 0) {\r\n      this.chatBodyScrollTop();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    pusher.unsubscribe(\"chat_\" + this.props.my_id);\r\n    this.setState({\r\n      is_open: false\r\n    });\r\n  }\r\n  handlePaste(e) {\r\n    for (let i = 0; i < e.clipboardData.items.length; i++) {\r\n      let item = e.clipboardData.items[i];\r\n      if (item.type.indexOf(\"image\") !== -1) {\r\n        this.uploadFileFromClipboard(item.getAsFile());\r\n      } else {\r\n      }\r\n    }\r\n  }\r\n  chatBodyScrollTop() {\r\n    let chatDiv = document.getElementById(\r\n      \"chat-messages_\" + this.props.contactUser.id\r\n    );\r\n    chatDiv.scrollTop = document.getElementById(\r\n      \"chat-messages-lists_\" + this.props.contactUser.id\r\n    ).clientHeight;\r\n  }\r\n  handleSendMessage(e) {\r\n    e.preventDefault();\r\n    let chat_history = this.state.chat_history;\r\n    chat_history.push({\r\n      user_id: this.props.contactUser.id,\r\n      sender_id: this.props.my_id,\r\n      type: \"text\",\r\n      message: this.state.message,\r\n      sender_profile_picture: this.props.my_profile_pic\r\n    });\r\n    this.setState(\r\n      {\r\n        chat_history: chat_history\r\n      },\r\n      () => {\r\n        //   setTimeout(3000)\r\n        const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n        const chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n        if (chatListDiv && chatListDiv.clientHeight) {\r\n          chatDiv.scrollTop = chatListDiv.clientHeight;\r\n        }\r\n      }\r\n    );\r\n    if (this.props.my_id) {\r\n      const req = {\r\n        user_id: this.props.contactUser.id,\r\n        sender_id: this.props.my_id,\r\n        message: this.state.message\r\n      }\r\n      chatService.sendChatMessage(req).then(res => {\r\n        if (res) {\r\n          this.setState({\r\n            chat_history: res\r\n          })\r\n          const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n          const chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n          if (chatListDiv && chatListDiv.clientHeight) {\r\n            chatDiv.scrollTop = chatListDiv.clientHeight;\r\n          }\r\n        } else {\r\n          alertService.showError('Send chat message');\r\n        }\r\n      })\r\n    } else {\r\n    }\r\n    this.setState({\r\n      message: \"\"\r\n    });\r\n  }\r\n  uploadFile(file) {\r\n    let formData = new FormData();\r\n    formData.append(\"files\", file);\r\n    formData.append(\"user_id\", this.props.contactUser.id);\r\n    formData.append(\"sender_id\", this.props.my_id);\r\n    \r\n     axios.post( '/ajax/chat/fileupload', formData,  {\r\n        onUploadProgress: progressEvent => {\r\n          this.setState({\r\n            uploading_progress : progressEvent.loaded / progressEvent.total,\r\n            uploading : true\r\n          })\r\n        }\r\n      }).then(res => {\r\n        if (res) {\r\n          this.setState(\r\n            {\r\n              uploading: false,\r\n              uploading_progress: 0,\r\n              chat_history: res\r\n            },\r\n            () => {\r\n              const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n              chatDiv.scrollTop = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id).clientHeight;\r\n            }\r\n          );\r\n        } else {\r\n          alertService.showError('Upload file');\r\n        }\r\n      })\r\n      .catch(e => {\r\n        this.setState({\r\n          uploading: false,\r\n          uploading_progress: 0\r\n        });\r\n      });\r\n  }\r\n  uploadFileFromClipboard(file) {\r\n    this.uploadFile(file);\r\n  }\r\n  fileChange(e) {\r\n    e.preventDefault();\r\n    this.uploadFile(e.target.files[0]);\r\n  }\r\n  openBox() {\r\n    this.setState({\r\n      is_open: !this.state.is_open\r\n    });\r\n  }\r\n  chatKeyPress(e) {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      let chat_history = this.state.chat_history;\r\n      chat_history.push({\r\n        user_id: this.props.contactUser.id,\r\n        sender_id: this.props.my_id,\r\n        type: \"text\",\r\n        message: this.state.message,\r\n        sender_profile_picture: this.props.my_profile_pic\r\n      });\r\n      this.setState(\r\n        {\r\n          chat_history: chat_history\r\n        },\r\n        () => {\r\n          //   setTimeout(3000)\r\n          const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n          const chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n          if (chatListDiv && chatListDiv.clientHeight) {\r\n            chatDiv.scrollTop = chatListDiv.clientHeight;\r\n          }\r\n        }\r\n      );\r\n      if (this.props.my_id) {\r\n        const req = {\r\n          user_id: this.props.contactUser.id,\r\n          sender_id: this.props.my_id,\r\n          message: this.state.message\r\n        }\r\n        chatService.sendChatMessage(req).then(res => {\r\n          if (res) {\r\n            this.setState({\r\n              chat_history: res\r\n            })\r\n            const chatDiv = document.getElementById(\"chat-messages_\" + this.props.contactUser.id);\r\n            const chatListDiv = document.getElementById(\"chat-messages-lists_\" + this.props.contactUser.id);\r\n            if (chatListDiv && chatListDiv.clientHeight) {\r\n              chatDiv.scrollTop = chatListDiv.clientHeight;\r\n            }\r\n          } else {\r\n            alertService.showError('Send chat message');\r\n          }\r\n        })\r\n      } else {\r\n      }\r\n      this.setState({\r\n        message: \"\"\r\n      });\r\n    } else {\r\n      if (canPublish) {\r\n        const req = {\r\n          user_id: this.props.contactUser.id,\r\n          sender_id: this.props.my_id\r\n        }\r\n        chatService.sendTypingStatus(req).then(res => {\r\n        })\r\n        canPublish = false;\r\n        setTimeout(() => {canPublish = true;}, throttleTime);\r\n      }\r\n    }\r\n    this.props.onTyping();\r\n  }\r\n  chatKeyChange(e) {\r\n    this.setState({\r\n      message: e.target.value\r\n    });\r\n  }\r\n  handleTogglekbactive() {\r\n    this.setState({\r\n      kbactive: !this.state.kbactive\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"body-main-chat\">\r\n        <div className=\"body-expand-header\">\r\n          <div className=\"body-expand-back\">\r\n            <button onClick={this.props.closeChatBox}>\r\n              <FontAwesomeIcon icon={faChevronLeft}/>\r\n            </button>\r\n          </div>\r\n          <div className=\"body-expand-team\">\r\n            <div className=\"body-expand-teamimg\">\r\n              <img src={this.props.contactUser.profile_picture.src} alt=\"contact user\" />\r\n            </div>\r\n            <div className=\"body-expand-teamname\">\r\n              <h4>{this.props.contactUser.full_name}</h4>\r\n              <p> {this.props.contactUser.live}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"body-conversation-middle\"\r\n          id={\"chat-messages_\" + this.props.contactUser.id}\r\n        >\r\n          <Chathistory\r\n            is_typing={this.state.is_typing}\r\n            chat_history={this.state.chat_history}\r\n            chatUser={this.props.contactUser.id}\r\n          />\r\n        </div>\r\n        <div className=\"body-conversation-footer\">\r\n          {this.state.uploading ? (\r\n            <Progress completed={this.state.uploading_progress * 100} />\r\n          ) : null}\r\n          <div\r\n            className={\r\n              this.state.kbactive\r\n                ? \"body-conversation-inner \"\r\n                : \"body-conversation-inner kbactive\"\r\n            }\r\n            onClick={this.handleTogglekbactive}\r\n          >\r\n            <textarea\r\n              onPaste={this.handlePaste}\r\n              type=\"text\"\r\n              className=\"chatinput\"\r\n              placeholder=\"Send message...\"\r\n              value={this.state.message}\r\n              onKeyPress={this.chatKeyPress}\r\n              onChange={this.chatKeyChange}\r\n            />\r\n            <div className=\"body-conversation-button\">\r\n              <div className=\"body-button-upload\">\r\n                <label htmlFor={\"file\" + this.props.contactUser.id}>\r\n                  {/* <i className=\"fas fa-link\" /> */}\r\n                  <FontAwesomeIcon icon={faLink} />\r\n                </label>\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={this.fileChange}\r\n                  id={\"file\" + this.props.contactUser.id}\r\n                />\r\n              </div>\r\n              <div className=\"body-conversation-submit\">\r\n                <button type=\"button\" onClick={this.handleSendMessage}>\r\n                  {/* <i className=\"fas fa-paper-plane\" /> */}\r\n                  <FontAwesomeIcon icon={faPaperPlane} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserChatBox;\r\n","import React from 'react';\r\nimport Pusher from 'pusher-js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCommentAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport ContactList from './ContactList';\r\nimport UserChatBox from './UserChatBox';\r\n\r\nimport { chatService } from 'services/chat';\r\nimport { alertService } from 'services/alert';\r\nimport { getCookie } from 'services/config';\r\nimport { authService } from 'services/auth';\r\n\r\nimport 'assets/styles/chatbox/chatbox.scss';\r\n\r\nconst pusher = new Pusher(\"ccd81a8b36efcabe5a7b\", {\r\n  cluster: \"mt1\",\r\n  encrypted: true,\r\n  disableStats: true\r\n});\r\n\r\nclass Chatbox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLogedIn: authService.isSigned(),\r\n      contacts: [],\r\n      chatbox: null,\r\n      active_chatbox: null,\r\n      show_chatbox: true,\r\n      open_chat_box: false\r\n    };\r\n    this.openChat = this.openChat.bind(this);\r\n    this.closeChatBox = this.closeChatBox.bind(this);\r\n    this.handleBoxOpen = this.handleBoxOpen.bind(this);\r\n    this.archiveContact = this.archiveContact.bind(this);\r\n    this.activeContact = this.activeContact.bind(this);\r\n    this.blockContact = this.blockContact.bind(this);\r\n    this.blockContact = this.blockContact.bind(this);\r\n    this.unblockContact = this.unblockContact.bind(this);\r\n    this.deleteContact = this.deleteContact.bind(this);\r\n    this.activeChatBox = this.activeChatBox.bind(this);\r\n    this.notifySoundUrl = \"https://res.cloudinary.com/vacation-rentals/video/upload/v1554130121/audio/alarm.mp3\";\r\n    this.notifySound = new Audio(this.notifySoundUrl);\r\n  }\r\n\r\n  activeChatBox(user_id) {\r\n    this.setState({\r\n      active_chatbox: user_id\r\n    });\r\n  }\r\n  \r\n  openChat(user_id, openOnly = null) {\r\n    let contactUser = null;\r\n    this.state.contacts.map(contact => {\r\n      if (contact.id === user_id) {\r\n        return contactUser = contact;\r\n      }\r\n      return null;\r\n    });\r\n    this.setState({\r\n      chatbox: user_id,\r\n      contactUser: contactUser,\r\n      open_chat_box: true,\r\n      show_chatbox: true\r\n    });\r\n    // console.log(user_id)\r\n  }\r\n\r\n  closeChatBox() {\r\n    this.setState({\r\n      chatbox: null\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.isLogedIn === true) {\r\n      chatService.getContactLists().then(res => {\r\n        if (res) {\r\n          this.setState({ contacts: res});\r\n        } else {\r\n          alertService.showError('Get contact list');\r\n        }\r\n      }) \r\n     \r\n      const channel = pusher.subscribe(\"chat_\" + getCookie('user_id'));\r\n      channel.bind(\"App\\\\Events\\\\MessageSent\", data => {\r\n        if (data.message.message.sender_id !== this.state.active_contact) {\r\n          alertService.showSuccess(\r\n            \"You received new message from \" +\r\n              data.message.message.sender.full_name\r\n          );\r\n          let self = this;\r\n          const playPromise = this.notifySound.play();\r\n          if (playPromise !== null) {\r\n            playPromise.catch(() => {\r\n              self.notifySound.play();\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      if (this.props.chatmoduleReducer) {\r\n        if (\r\n          this.props.chatmoduleReducer.is_show !== \"undefined\" &&\r\n          this.props.chatmoduleReducer.is_show === true\r\n        ) {\r\n          document.getElementById(\"footer\").style.display = \"block\";\r\n          this.setState(\r\n            {\r\n              show_chatbox: true\r\n            },\r\n            () => {}\r\n          );\r\n        } else {\r\n          document.getElementById(\"footer\").style.display = \"none\";\r\n          this.setState(\r\n            {\r\n              show_chatbox: false,\r\n              open_chat_box: false\r\n            },\r\n            () => {}\r\n          );\r\n        }\r\n        if (this.props.chatmoduleReducer.contactId) {\r\n          console.log(\"open chat tracking\", this.props.chatmoduleReducer.contactId);\r\n          chatService.getContactLists().then(res => {\r\n            if (res) {\r\n              this.setState(\r\n                {\r\n                  contacts: res.data\r\n                },\r\n                () => {\r\n                  let contactId = this.props.chatmoduleReducer.contactId;\r\n                  let contacts = this.state.contacts;\r\n                  contacts.foreach(contact => {\r\n                    if (contact.contact_id === contactId) {\r\n                      this.setState(\r\n                        {\r\n                          open_chat_box: true,\r\n                          show_chatbox: true\r\n                        },\r\n                        () => {\r\n                          this.openChat(contact.id, 1);\r\n                        }\r\n                      );\r\n                    }\r\n                  });\r\n                }\r\n              );\r\n            } else {\r\n              alertService.showError('Get contact list');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    pusher.unsubscribe(\"chat_\" + getCookie('user_id'));\r\n  }\r\n  archiveContact(contact_id) {\r\n    const req = {\r\n      contactId: contact_id,\r\n      status: \"archived\",\r\n      userId: getCookie('user_id')\r\n    };\r\n    chatService.updateContactStatus(req).then(res => {\r\n      if (res) {\r\n        this.setState({ contacts: res });\r\n      } else {\r\n        alertService.showError('Update contact status');\r\n      }\r\n    });\r\n  }\r\n  activeContact(contact_id) {\r\n    console.log(contact_id);\r\n    const req = {\r\n      contactId: contact_id,\r\n      status: \"active\",\r\n      userId: getCookie('user_id')\r\n    };\r\n    chatService.updateContactStatus(req).then(res => {\r\n      if (res) {\r\n        this.setState({ contacts: res });\r\n      } else {\r\n        alertService.showError('Update contact status');\r\n      }\r\n    });\r\n  }\r\n  blockContact(contact_id) {\r\n    const req = {\r\n      contactId: contact_id,\r\n      status: \"blocked\",\r\n      userId: getCookie('user_id')\r\n    };\r\n    chatService.updateContactStatus(req).then(res => {\r\n      if (res) {\r\n        this.setState({ contacts: res });\r\n      } else {\r\n        alertService.showError('Update contact status');\r\n      }\r\n    });\r\n  }\r\n  unblockContact(contact_id) {\r\n    const req = {\r\n      contactId: contact_id,\r\n      status: \"active\",\r\n      userId: getCookie('user_id')\r\n    };\r\n    chatService.updateContactStatus(req).then(res => {\r\n      if (res) {\r\n        this.setState({ contacts: res });\r\n      } else {\r\n        alertService.showError('Update contact status');\r\n      }\r\n    });\r\n  }\r\n  deleteContact(contact_id) {\r\n    const req = {\r\n      contactId: contact_id,\r\n      status: \"removed\",\r\n      userId: getCookie('user_id')\r\n    };\r\n    chatService.updateContactStatus(req).then(res => {\r\n      if (res) {\r\n        this.setState({ contacts: res });\r\n      } else {\r\n        alertService.showError('Update contact status');\r\n      }\r\n    });\r\n  }\r\n  handleBoxOpen() {\r\n    this.setState({\r\n      open_chat_box: !this.state.open_chat_box\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.isLogedIn === true && this.state.show_chatbox === true)\r\n      return (\r\n        <div className=\"chat-box\">\r\n          <div className={(this.state.open_chat_box ? \"chat-window chat-window-open\" : \"chat-window\") + (this.state.chatbox ? \" inner-open\" : \"\")}>\r\n            <div className=\"chat-conversation\">\r\n              <div className=\"chat-head\">\r\n                <div>\r\n                  <div className=\"chat-head-view-enter\">\r\n                    <div className=\"chat-head-view-head\">\r\n                      <h3>Hi there <span role=\"img\" aria-label=\"sheep\">👋</span></h3>\r\n                      <p>\r\n                        Helping Vacation.Rentals Owners Property Managers for\r\n                        Over 5 Years. Got a Question? Or Just Saying Hi? Send us\r\n                        a Message.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"chat-body\">\r\n                <div className=\"body-fixed\">\r\n                  <div className=\"body-main\">\r\n                    <div className=\"body-main-wrap\">\r\n                      <div className=\"body-main-card\">\r\n                        <div className=\"body-main-conve\">\r\n                          <div className=\"body-main-content\">\r\n                            <div className=\"body-main-con\">\r\n                              <ContactList\r\n                                contacts={this.state.contacts}\r\n                                openChat={this.openChat}\r\n                                active={this.activeContact}\r\n                                archive={this.archiveContact}\r\n                                block={this.blockContact}\r\n                                unblock={this.unblockContact}\r\n                                delete={this.deleteContact}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"body-main-footer\">\r\n                            <a\r\n                              className=\"btn btn-outline-primary\"\r\n                              href=\"/inbox\"\r\n                            >\r\n                              <FontAwesomeIcon icon={faCommentAlt}/>\r\n                              Go to Inbox{\" \"}\r\n                            </a>\r\n                          </div>\r\n                        </div>\r\n                        {this.state.chatbox && (\r\n                          <UserChatBox\r\n                            closeChatBox={this.closeChatBox}\r\n                            isActive={1}\r\n                            onTyping={() =>\r\n                              this.activeChatBox(this.state.contactUser.id)\r\n                            }\r\n                            contactUser={this.state.contactUser}\r\n                            my_id={getCookie('user_id')}\r\n                            my_profile_pic={getCookie('userProfilePic')}\r\n                            user_id={this.state.chatbox}\r\n                            openChat={() => this.openChat(this.state.chatbox)}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={\r\n              this.state.open_chat_box ? \"chat-footer open\" : \"chat-footer\"\r\n            }\r\n            onClick={this.handleBoxOpen}\r\n          >\r\n            <FontAwesomeIcon icon={faCommentAlt}/>\r\n            <FontAwesomeIcon icon={faTimes}/>\r\n          </div>\r\n        </div>\r\n      );\r\n    else return null;\r\n  }\r\n}\r\n\r\nexport default Chatbox;\r\n\r\n// const mapStateToProps = state => ({\r\n//   ...state\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   openChatBoxAction: () => dispatch(openChatBoxAction)\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Chatbox);\r\n","import {API_HOST, ajaxGet, ajaxPost, getCookie} from 'services/config';\r\n\r\nclass ChatService {\r\n  /* Inbox / ChatBox */\r\n  getContactLists() {\r\n    return ajaxGet(`${API_HOST}/ajax/chat/getcontactlists?userId=` + getCookie('user_id'));\r\n  }\r\n\tupdateContactStatus(req) {\r\n    // return ajaxPost(`${API_HOST}/ajax/chatcontact/updatestatus`, req);\r\n    return '';\r\n  }\r\n\tupdateFile(req) {\r\n    // return ajaxPost(`${API_HOST}/ajax/chat/fileupload`, req);\r\n    return '';\r\n  }\r\n  getMessages(user_id, my_id) {\r\n    return ajaxGet(`${API_HOST}/ajax/chat/getmessages?chat_id=${user_id}&my_id=${my_id}`);\r\n  }\r\n  readChatMessage(req) {\r\n    // return ajaxPost(`${API_HOST}/ajax/chat/readMessage`, req);\r\n    return '';\r\n  }\r\n  sendChatMessage(req) {\r\n    // return ajaxPost(`${API_HOST}/ajax/chat/sendmessage`, req);\r\n    return '';\r\n  }\r\n  sendTypingStatus(req) {\r\n    // return ajaxPost(`${API_HOST}/ajax/chat/isTyping`, req);\r\n    return '';\r\n  }\r\n\r\n  /* Contact us */\r\n  getMail(req) {\r\n    // return ajaxPost(`${API_HOST}/getMail`, req);\r\n    return '';\r\n  }\r\n\r\n}\r\n\r\nexport const chatService = new ChatService();"],"sourceRoot":""}